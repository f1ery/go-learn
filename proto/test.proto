syntax="proto3";

option go_package=".;test";

service TestService {
  rpc Test(Request) returns(Response){};
  rpc GetTest(TestReq) returns(TestResp){}
}

// Request 请求结构
message Request {
  string name = 1;
}



// Response 响应结构
message Response {
  string message = 1;
}

//TestReq测试
message TestReq {
  //required int32 age = 1;
  int32 age = 1;
  int64 count = 2;
  double money = 3;
  float socre = 4;
//  required string name = 5;
  string name = 5;
  bool fat = 6;
  bytes char = 7;

  //  //status枚举状态,如果在内部定义，则只能在内部使用
  //  enum Status {
  //    OK = 0;
  //    Fail = 1;
  //  }
  Status status = 8;

  //child 子结构,如果在内部定义，则只能在内部使用
  //  message Child {
  //    string sex = 1;
  //  }
  Child child = 9;

  map<string, string> dict = 10;

  int32 user_id = 11;

  UserType user_type = 12;

  repeated UserInfo user_infos = 13; //[ {175, 65}, {188, 80}]

  repeated string likes = 14; // ["basketball", "football"]

  //TestImport test_import = 15;
}

message UserInfo {
  int32 height = 1;
  int32 weight = 2;
}

//status枚举状态
enum Status {
  OK = 0;
  Fail = 1;
}

// UserType 用户类型
enum UserType {
  USER_TYPE_1 = 0;
  USER_TYPE_2 = 1;
  USER_TYPE_3 = 2;
}

//child 子结构
message Child {
  string sex = 1;
}

message TestResp {
  string name = 1;
  int32 age = 2;
}